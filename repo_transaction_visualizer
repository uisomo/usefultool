import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import matplotlib.patches as mpatches

# Set style
plt.style.use('seaborn-v0_8-whitegrid')

class EnhancedBulletChart:
    """
    Enhanced Bullet Chart specifically designed for tenant analysis
    """
    
    def __init__(self, data):
        self.data = data
        
    def prepare_data(self, client_id, client_id_col, measure_col, category_col, category_order):
        """Prepare data for the specific client"""
        filtered_data = self.data[self.data[category_col].isin(category_order)].copy()
        
        # For overall statistics (without issuer), we need to aggregate by category first
        # to avoid duplicates when multiple issuers have the same category
        stats_list = []
        for category in category_order:
            category_data = filtered_data[filtered_data[category_col] == category][measure_col]
            non_zero_data = category_data[category_data != 0]
            
            if len(non_zero_data) > 0:
                avg_val = non_zero_data.mean()
                med_val = non_zero_data.median()
            else:
                avg_val = 0
                med_val = 0
            
            stats_list.append({
                category_col: category,
                'average': avg_val,
                'median': med_val
            })
        
        stats = pd.DataFrame(stats_list)
        
        # Get client-specific data - need to aggregate by category if there are multiple issuers
        client_data_all = filtered_data[filtered_data[client_id_col] == client_id]
        
        # Group by category and sum the values (combining all issuers)
        client_data = client_data_all.groupby(category_col)[measure_col].sum().reset_index()
        client_data.columns = [category_col, 'client_value']
        
        result = stats.merge(client_data, on=category_col, how='left')
        
        category_order_map = {cat: i for i, cat in enumerate(category_order)}
        result['sort_order'] = result[category_col].map(category_order_map)
        result = result.sort_values('sort_order').reset_index(drop=True)
        result = result.drop('sort_order', axis=1)
        result['client_value'] = result['client_value'].fillna(0)
        
        return result
    
    def prepare_data_with_issuer(self, client_id, client_id_col, measure_col, category_col, 
                                category_order, issuer_col):
        """
        Prepare data with issuer grouping and ordering
        
        Returns:
        - List of DataFrames, one for each issuer, ordered by absolute total measure value
        """
        # Get client data
        client_data = self.data[self.data[client_id_col] == client_id].copy()
        
        # Calculate total measure by issuer for this client
        issuer_totals = client_data.groupby(issuer_col)[measure_col].sum()
        
        # Sort by absolute value (largest absolute exposure first)
        issuer_totals_abs_sorted = issuer_totals.reindex(issuer_totals.abs().sort_values(ascending=False).index)
        
        # Create ordered list of issuers
        ordered_issuers = issuer_totals_abs_sorted.index.tolist()
        
        # Prepare data for each issuer
        issuer_data_list = []
        for idx, issuer in enumerate(ordered_issuers, 1):
            # Filter data for this issuer
            issuer_filtered = self.data[self.data[issuer_col] == issuer].copy()
            
            # Prepare data as before
            filtered_data = issuer_filtered[issuer_filtered[category_col].isin(category_order)].copy()
            
            stats_list = []
            for category in category_order:
                category_data = filtered_data[filtered_data[category_col] == category][measure_col]
                non_zero_data = category_data[category_data != 0]
                
                if len(non_zero_data) > 0:
                    avg_val = non_zero_data.mean()
                    med_val = non_zero_data.median()
                else:
                    avg_val = 0
                    med_val = 0
                
                stats_list.append({
                    category_col: category,
                    'average': avg_val,
                    'median': med_val
                })
            
            stats = pd.DataFrame(stats_list)
            
            # Get client-specific data for this issuer
            client_issuer_data = issuer_filtered[
                issuer_filtered[client_id_col] == client_id
            ][[category_col, measure_col]].copy()
            client_issuer_data.columns = [category_col, 'client_value']
            
            result = stats.merge(client_issuer_data, on=category_col, how='left')
            
            # Order by category_order
            category_order_map = {cat: i for i, cat in enumerate(category_order)}
            result['sort_order'] = result[category_col].map(category_order_map)
            result = result.sort_values('sort_order').reset_index(drop=True)
            result = result.drop('sort_order', axis=1)
            result['client_value'] = result['client_value'].fillna(0)
            
            issuer_data_list.append({
                'issuer': issuer,
                'number': idx,
                'total': issuer_totals_abs_sorted[issuer],
                'data': result
            })
        
        return issuer_data_list
    
    def format_number(self, value):
        """Format numbers with k/m units"""
        abs_value = abs(value)
        if abs_value >= 1_000_000:
            return f'{value/1_000_000:.1f}m'
        elif abs_value >= 1_000:
            return f'{value/1_000:.1f}k'
        else:
            return f'{value:.0f}'
    
    def create_bullet_chart(self, client_id, client_id_col, measure_col, category_col, 
                           category_order, title=None, figsize=(16, 10)):
        """Create an enhanced bullet chart with better label positioning"""
        data = self.prepare_data(client_id, client_id_col, measure_col, category_col, category_order)
        
        fig, ax = plt.subplots(figsize=figsize)
        
        y_positions = np.arange(len(data))
        bar_height = 0.4
        
        # Determine x-axis limits for consistent positioning
        all_values = np.concatenate([data['client_value'], data['average'], data['median']])
        x_min = min(0, all_values.min() * 1.2)
        x_max = max(0, all_values.max() * 1.2)
        
        for i, (idx, row) in enumerate(data.iterrows()):
            # Draw average bar (background) - light grey
            avg_left = min(0, row['average'])
            avg_width = abs(row['average'])
            ax.barh(y_positions[i], avg_width, bar_height * 1.8, 
                   left=avg_left, color='#E0E0E0', alpha=0.8, edgecolor='none')
            
            # Draw client value bar - blue/red based on positive/negative
            client_color = 'dodgerblue' if row['client_value'] >= 0 else 'crimson'
            client_left = min(0, row['client_value'])
            client_width = abs(row['client_value'])
            ax.barh(y_positions[i], client_width, bar_height,
                   left=client_left, color=client_color, alpha=0.9, edgecolor='white', linewidth=1)
            
            # Draw median line - thick black line
            ax.plot([row['median'], row['median']], 
                   [y_positions[i] - bar_height * 0.9, y_positions[i] + bar_height * 0.9],
                   color='black', linewidth=4, solid_capstyle='butt')
            
            # Add labels with smart positioning
            # Client value label - at the end of the bar
            if row['client_value'] != 0:
                client_label_x = row['client_value']
                # Add small offset based on direction
                offset = x_max * 0.02 if row['client_value'] > 0 else -x_max * 0.02
                ax.text(client_label_x + offset, y_positions[i], 
                       self.format_number(row['client_value']),
                       va='center', ha='left' if row['client_value'] > 0 else 'right',
                       fontweight='bold', fontsize=14, color=client_color)
            
            # Average label - at the end of grey bar
            if row['average'] != 0:
                avg_label_x = row['average']
                offset = x_max * 0.02 if row['average'] > 0 else -x_max * 0.02
                ax.text(avg_label_x + offset, y_positions[i] - bar_height * 0.7, 
                       self.format_number(row['average']),
                       va='center', ha='left' if row['average'] > 0 else 'right',
                       fontweight='bold', fontsize=12, color='grey', alpha=0.8)
            
            # Median label - above the median line
            if row['median'] != 0:
                ax.text(row['median'], y_positions[i] + bar_height * 1.2, 
                       self.format_number(row['median']),
                       va='bottom', ha='center',
                       fontweight='bold', fontsize=12, color='black',
                       bbox=dict(boxstyle="round,pad=0.2", facecolor='white', 
                                edgecolor='none', alpha=0.9))
        
        # Customize axes
        if title is None:
            title = f'Bullet Chart: {measure_col} by {category_col}\nClient {client_id} vs Market Statistics'
        ax.set_title(title, fontsize=18, fontweight='bold', pad=25)
        ax.set_xlabel(measure_col.replace('_', ' ').title(), fontsize=14, fontweight='bold')
        ax.set_ylabel(category_col.replace('_', ' ').title(), fontsize=14, fontweight='bold')
        
        # Set y-axis
        ax.set_yticks(y_positions)
        ax.set_yticklabels(data[category_col], fontsize=12)
        ax.set_ylim(-0.5, len(data) - 0.5)
        
        # Set x-axis
        ax.set_xlim(x_min, x_max)
        
        # Add vertical line at zero
        ax.axvline(x=0, color='black', linestyle='-', alpha=0.3, linewidth=1)
        
        # Remove top and right spines
        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
        
        # No grid
        ax.grid(False)
        ax.set_axisbelow(True)
        
        # Custom legend
        client_patch = mpatches.Patch(color='dodgerblue', label=f'Client {client_id}')
        avg_patch = mpatches.Patch(color='#E0E0E0', label='Average (excl. zeros)')
        median_line = plt.Line2D([0], [0], color='black', linewidth=4, label='Median (excl. zeros)')
        ax.legend(handles=[client_patch, avg_patch, median_line], 
                 loc='best', frameon=True, fancybox=True, shadow=True)
        
        plt.tight_layout()
        return fig, ax
    
    def create_bullet_chart_with_issuers(self, client_id, client_id_col, measure_col, category_col, 
                                       category_order, issuer_col=None, title=None, figsize=(16, 10)):
        """
        Create bullet chart(s) - if issuer_col is provided, create one chart per issuer
        
        Parameters:
        - issuer_col: Optional column name for issuer grouping
        """
        if issuer_col is None:
            # No issuer column, create single chart as before
            return self.create_bullet_chart(client_id, client_id_col, measure_col, 
                                          category_col, category_order, title, figsize)
        
        # Get issuer data
        issuer_data_list = self.prepare_data_with_issuer(client_id, client_id_col, measure_col, 
                                                        category_col, category_order, issuer_col)
        
        # Create a figure with subplots for each issuer
        n_issuers = len(issuer_data_list)
        # Calculate figure height - ensure enough space for title, legend, and all subplots
        subplot_height = 4  # Height per subplot
        top_space = 3  # Space for title and legend
        fig_height = top_space + (subplot_height * n_issuers)
        
        fig, axes = plt.subplots(n_issuers, 1, figsize=(figsize[0], fig_height), 
                               squeeze=False, sharex=True)
        
        # Determine global x-axis limits for consistency
        all_values = []
        for issuer_info in issuer_data_list:
            data = issuer_info['data']
            all_values.extend(data['client_value'].values)
            all_values.extend(data['average'].values)
            all_values.extend(data['median'].values)
        
        x_min = min(0, min(all_values) * 1.2) if all_values else -100
        x_max = max(0, max(all_values) * 1.2) if all_values else 100
        
        # Create bullet chart for each issuer
        for idx, issuer_info in enumerate(issuer_data_list):
            ax = axes[idx, 0]
            data = issuer_info['data']
            issuer_name = issuer_info['issuer']
            issuer_number = issuer_info['number']
            issuer_total = issuer_info['total']
            
            y_positions = np.arange(len(data))
            bar_height = 0.4
            
            # Create issuer label with number and total - place it as a subplot title instead
            issuer_label = f"{issuer_number}. {issuer_name} (Total: {self.format_number(issuer_total)})"
            ax.set_title(issuer_label, fontsize=13, fontweight='bold', pad=10, 
                        bbox=dict(boxstyle="round,pad=0.4", facecolor='lightgray', 
                                 edgecolor='gray', alpha=0.9))
            
            for i, (_, row) in enumerate(data.iterrows()):
                # Draw average bar (background) - light grey
                avg_left = min(0, row['average'])
                avg_width = abs(row['average'])
                ax.barh(y_positions[i], avg_width, bar_height * 1.8, 
                       left=avg_left, color='#E0E0E0', alpha=0.8, edgecolor='none')
                
                # Draw client value bar - blue/red based on positive/negative
                client_color = 'dodgerblue' if row['client_value'] >= 0 else 'crimson'
                client_left = min(0, row['client_value'])
                client_width = abs(row['client_value'])
                ax.barh(y_positions[i], client_width, bar_height,
                       left=client_left, color=client_color, alpha=0.9, edgecolor='white', linewidth=1)
                
                # Draw median line - thick black line
                ax.plot([row['median'], row['median']], 
                       [y_positions[i] - bar_height * 0.9, y_positions[i] + bar_height * 0.9],
                       color='black', linewidth=4, solid_capstyle='butt')
                
                # Add labels
                # Client value label
                if row['client_value'] != 0:
                    client_label_x = row['client_value']
                    offset = x_max * 0.02 if row['client_value'] > 0 else -x_max * 0.02
                    ax.text(client_label_x + offset, y_positions[i], 
                           self.format_number(row['client_value']),
                           va='center', ha='left' if row['client_value'] > 0 else 'right',
                           fontweight='bold', fontsize=12, color=client_color)
                
                # Average label
                if row['average'] != 0:
                    avg_label_x = row['average']
                    offset = x_max * 0.02 if row['average'] > 0 else -x_max * 0.02
                    ax.text(avg_label_x + offset, y_positions[i] - bar_height * 0.7, 
                           self.format_number(row['average']),
                           va='center', ha='left' if row['average'] > 0 else 'right',
                           fontweight='bold', fontsize=10, color='grey', alpha=0.8)
                
                # Median label
                if row['median'] != 0:
                    ax.text(row['median'], y_positions[i] + bar_height * 1.2, 
                           self.format_number(row['median']),
                           va='bottom', ha='center',
                           fontweight='bold', fontsize=10, color='black',
                           bbox=dict(boxstyle="round,pad=0.2", facecolor='white', 
                                    edgecolor='none', alpha=0.9))
            
            # Customize axes
            ax.set_yticks(y_positions)
            ax.set_yticklabels(data[category_col], fontsize=11)
            ax.set_ylim(-0.5, len(data) - 0.5)  # Normal limits since title is outside
            ax.set_xlim(x_min, x_max)
            
            # Add vertical line at zero
            ax.axvline(x=0, color='black', linestyle='-', alpha=0.3, linewidth=1)
            
            # Remove spines
            ax.spines['top'].set_visible(False)
            ax.spines['right'].set_visible(False)
            if idx < n_issuers - 1:  # Remove bottom spine except for last subplot
                ax.spines['bottom'].set_visible(False)
                ax.tick_params(bottom=False)
            
            # No grid
            ax.grid(False)
            
            # Only add x-label to bottom subplot
            if idx == n_issuers - 1:
                ax.set_xlabel(measure_col.replace('_', ' ').title(), fontsize=14, fontweight='bold')
        
        # Overall title
        if title is None:
            title = f'Bullet Chart by Issuer: {measure_col} by {category_col}\nClient {client_id} vs Market Statistics'
        fig.suptitle(title, fontsize=18, fontweight='bold', y=0.98)
        
        # Add legend at the top with better spacing - move it below the title
        client_patch = mpatches.Patch(color='dodgerblue', label=f'Client {client_id}')
        avg_patch = mpatches.Patch(color='#E0E0E0', label='Average (excl. zeros)')
        median_line = plt.Line2D([0], [0], color='black', linewidth=4, label='Median (excl. zeros)')
        fig.legend(handles=[client_patch, avg_patch, median_line], 
                  loc='upper center', bbox_to_anchor=(0.5, 0.92), ncol=3,
                  frameon=True, fancybox=True, shadow=True)
        
        plt.tight_layout(rect=[0, 0.02, 1, 0.88])  # Leave space at top for main title/legend and small space at bottom
        plt.subplots_adjust(hspace=0.6)  # Even more space between subplots for subplot titles
        return fig, axes


# Generate sample data
def generate_sample_data():
    """Use predefined test data with issuer information"""
    test_data = [
        # Client_001 - Issuer A
        {'client_id': 'Client_001', 'issuer': 'Issuer_A', 'tenor_bucket': '1M', 'net_dv01': 5200},
        {'client_id': 'Client_001', 'issuer': 'Issuer_A', 'tenor_bucket': '3M', 'net_dv01': 4800},
        {'client_id': 'Client_001', 'issuer': 'Issuer_A', 'tenor_bucket': '6M', 'net_dv01': 2100},
        {'client_id': 'Client_001', 'issuer': 'Issuer_A', 'tenor_bucket': '1Y', 'net_dv01': -1200},
        {'client_id': 'Client_001', 'issuer': 'Issuer_A', 'tenor_bucket': '2Y', 'net_dv01': -3500},
        {'client_id': 'Client_001', 'issuer': 'Issuer_A', 'tenor_bucket': '5Y', 'net_dv01': -5800},
        {'client_id': 'Client_001', 'issuer': 'Issuer_A', 'tenor_bucket': '10Y', 'net_dv01': -8200},
        
        # Client_001 - Issuer B (larger total)
        {'client_id': 'Client_001', 'issuer': 'Issuer_B', 'tenor_bucket': '1M', 'net_dv01': 8200},
        {'client_id': 'Client_001', 'issuer': 'Issuer_B', 'tenor_bucket': '3M', 'net_dv01': 7500},
        {'client_id': 'Client_001', 'issuer': 'Issuer_B', 'tenor_bucket': '6M', 'net_dv01': 4100},
        {'client_id': 'Client_001', 'issuer': 'Issuer_B', 'tenor_bucket': '1Y', 'net_dv01': 1200},
        {'client_id': 'Client_001', 'issuer': 'Issuer_B', 'tenor_bucket': '2Y', 'net_dv01': -1500},
        {'client_id': 'Client_001', 'issuer': 'Issuer_B', 'tenor_bucket': '5Y', 'net_dv01': -2800},
        {'client_id': 'Client_001', 'issuer': 'Issuer_B', 'tenor_bucket': '10Y', 'net_dv01': -4200},
        
        # Client_001 - Issuer C (smallest total)
        {'client_id': 'Client_001', 'issuer': 'Issuer_C', 'tenor_bucket': '1M', 'net_dv01': 1200},
        {'client_id': 'Client_001', 'issuer': 'Issuer_C', 'tenor_bucket': '3M', 'net_dv01': 800},
        {'client_id': 'Client_001', 'issuer': 'Issuer_C', 'tenor_bucket': '6M', 'net_dv01': -500},
        {'client_id': 'Client_001', 'issuer': 'Issuer_C', 'tenor_bucket': '1Y', 'net_dv01': -1200},
        {'client_id': 'Client_001', 'issuer': 'Issuer_C', 'tenor_bucket': '2Y', 'net_dv01': -2500},
        {'client_id': 'Client_001', 'issuer': 'Issuer_C', 'tenor_bucket': '5Y', 'net_dv01': 0},  # Zero value
        {'client_id': 'Client_001', 'issuer': 'Issuer_C', 'tenor_bucket': '10Y', 'net_dv01': -3800},
        
        # Client_002 - Issuer A
        {'client_id': 'Client_002', 'issuer': 'Issuer_A', 'tenor_bucket': '1M', 'net_dv01': 4500},
        {'client_id': 'Client_002', 'issuer': 'Issuer_A', 'tenor_bucket': '3M', 'net_dv01': 4200},
        {'client_id': 'Client_002', 'issuer': 'Issuer_A', 'tenor_bucket': '6M', 'net_dv01': 1800},
        {'client_id': 'Client_002', 'issuer': 'Issuer_A', 'tenor_bucket': '1Y', 'net_dv01': -800},
        {'client_id': 'Client_002', 'issuer': 'Issuer_A', 'tenor_bucket': '2Y', 'net_dv01': -2800},
        {'client_id': 'Client_002', 'issuer': 'Issuer_A', 'tenor_bucket': '5Y', 'net_dv01': -4500},
        {'client_id': 'Client_002', 'issuer': 'Issuer_A', 'tenor_bucket': '10Y', 'net_dv01': -6800},
        
        # Client_002 - Issuer B
        {'client_id': 'Client_002', 'issuer': 'Issuer_B', 'tenor_bucket': '1M', 'net_dv01': 6500},
        {'client_id': 'Client_002', 'issuer': 'Issuer_B', 'tenor_bucket': '3M', 'net_dv01': 5200},
        {'client_id': 'Client_002', 'issuer': 'Issuer_B', 'tenor_bucket': '6M', 'net_dv01': 2800},
        {'client_id': 'Client_002', 'issuer': 'Issuer_B', 'tenor_bucket': '1Y', 'net_dv01': 800},
        {'client_id': 'Client_002', 'issuer': 'Issuer_B', 'tenor_bucket': '2Y', 'net_dv01': -1800},
        {'client_id': 'Client_002', 'issuer': 'Issuer_B', 'tenor_bucket': '5Y', 'net_dv01': -3500},
        {'client_id': 'Client_002', 'issuer': 'Issuer_B', 'tenor_bucket': '10Y', 'net_dv01': -5800},
        
        # Client_002 - Issuer C
        {'client_id': 'Client_002', 'issuer': 'Issuer_C', 'tenor_bucket': '1M', 'net_dv01': 2200},
        {'client_id': 'Client_002', 'issuer': 'Issuer_C', 'tenor_bucket': '3M', 'net_dv01': 1800},
        {'client_id': 'Client_002', 'issuer': 'Issuer_C', 'tenor_bucket': '6M', 'net_dv01': 500},
        {'client_id': 'Client_002', 'issuer': 'Issuer_C', 'tenor_bucket': '1Y', 'net_dv01': -800},
        {'client_id': 'Client_002', 'issuer': 'Issuer_C', 'tenor_bucket': '2Y', 'net_dv01': -1500},
        {'client_id': 'Client_002', 'issuer': 'Issuer_C', 'tenor_bucket': '5Y', 'net_dv01': -2200},
        {'client_id': 'Client_002', 'issuer': 'Issuer_C', 'tenor_bucket': '10Y', 'net_dv01': 0},  # Zero value
        
        # Client_003 - Issuer A
        {'client_id': 'Client_003', 'issuer': 'Issuer_A', 'tenor_bucket': '1M', 'net_dv01': 6200},
        {'client_id': 'Client_003', 'issuer': 'Issuer_A', 'tenor_bucket': '3M', 'net_dv01': 5800},
        {'client_id': 'Client_003', 'issuer': 'Issuer_A', 'tenor_bucket': '6M', 'net_dv01': 3200},
        {'client_id': 'Client_003', 'issuer': 'Issuer_A', 'tenor_bucket': '1Y', 'net_dv01': 0},
        {'client_id': 'Client_003', 'issuer': 'Issuer_A', 'tenor_bucket': '2Y', 'net_dv01': -2200},
        {'client_id': 'Client_003', 'issuer': 'Issuer_A', 'tenor_bucket': '5Y', 'net_dv01': -3800},
        {'client_id': 'Client_003', 'issuer': 'Issuer_A', 'tenor_bucket': '10Y', 'net_dv01': -5500},
        
        # Client_003 - Issuer B
        {'client_id': 'Client_003', 'issuer': 'Issuer_B', 'tenor_bucket': '1M', 'net_dv01': 7200},
        {'client_id': 'Client_003', 'issuer': 'Issuer_B', 'tenor_bucket': '3M', 'net_dv01': 6800},
        {'client_id': 'Client_003', 'issuer': 'Issuer_B', 'tenor_bucket': '6M', 'net_dv01': 4200},
        {'client_id': 'Client_003', 'issuer': 'Issuer_B', 'tenor_bucket': '1Y', 'net_dv01': 1500},
        {'client_id': 'Client_003', 'issuer': 'Issuer_B', 'tenor_bucket': '2Y', 'net_dv01': -1200},
        {'client_id': 'Client_003', 'issuer': 'Issuer_B', 'tenor_bucket': '5Y', 'net_dv01': -2800},
        {'client_id': 'Client_003', 'issuer': 'Issuer_B', 'tenor_bucket': '10Y', 'net_dv01': -3500},
        
        # Client_003 - Issuer C
        {'client_id': 'Client_003', 'issuer': 'Issuer_C', 'tenor_bucket': '1M', 'net_dv01': 2200},
        {'client_id': 'Client_003', 'issuer': 'Issuer_C', 'tenor_bucket': '3M', 'net_dv01': 1800},
        {'client_id': 'Client_003', 'issuer': 'Issuer_C', 'tenor_bucket': '6M', 'net_dv01': 800},
        {'client_id': 'Client_003', 'issuer': 'Issuer_C', 'tenor_bucket': '1Y', 'net_dv01': -200},
        {'client_id': 'Client_003', 'issuer': 'Issuer_C', 'tenor_bucket': '2Y', 'net_dv01': -1800},
        {'client_id': 'Client_003', 'issuer': 'Issuer_C', 'tenor_bucket': '5Y', 'net_dv01': -2500},
        {'client_id': 'Client_003', 'issuer': 'Issuer_C', 'tenor_bucket': '10Y', 'net_dv01': -3200},
        
        # Client_004 - Mixed issuers (for market statistics)
        {'client_id': 'Client_004', 'issuer': 'Issuer_A', 'tenor_bucket': '1M', 'net_dv01': 3800},
        {'client_id': 'Client_004', 'issuer': 'Issuer_A', 'tenor_bucket': '3M', 'net_dv01': 3500},
        {'client_id': 'Client_004', 'issuer': 'Issuer_A', 'tenor_bucket': '6M', 'net_dv01': 1200},
        {'client_id': 'Client_004', 'issuer': 'Issuer_A', 'tenor_bucket': '1Y', 'net_dv01': -1500},
        {'client_id': 'Client_004', 'issuer': 'Issuer_A', 'tenor_bucket': '2Y', 'net_dv01': -4200},
        {'client_id': 'Client_004', 'issuer': 'Issuer_A', 'tenor_bucket': '5Y', 'net_dv01': -6500},
        {'client_id': 'Client_004', 'issuer': 'Issuer_A', 'tenor_bucket': '10Y', 'net_dv01': -9200},
        
        {'client_id': 'Client_004', 'issuer': 'Issuer_B', 'tenor_bucket': '1M', 'net_dv01': 9200},
        {'client_id': 'Client_004', 'issuer': 'Issuer_B', 'tenor_bucket': '3M', 'net_dv01': 8500},
        {'client_id': 'Client_004', 'issuer': 'Issuer_B', 'tenor_bucket': '6M', 'net_dv01': 5200},
        {'client_id': 'Client_004', 'issuer': 'Issuer_B', 'tenor_bucket': '1Y', 'net_dv01': 2500},
        {'client_id': 'Client_004', 'issuer': 'Issuer_B', 'tenor_bucket': '2Y', 'net_dv01': -500},
        {'client_id': 'Client_004', 'issuer': 'Issuer_B', 'tenor_bucket': '5Y', 'net_dv01': -2200},
        {'client_id': 'Client_004', 'issuer': 'Issuer_B', 'tenor_bucket': '10Y', 'net_dv01': -3800},
        
        {'client_id': 'Client_004', 'issuer': 'Issuer_C', 'tenor_bucket': '1M', 'net_dv01': 1500},
        {'client_id': 'Client_004', 'issuer': 'Issuer_C', 'tenor_bucket': '3M', 'net_dv01': 1200},
        {'client_id': 'Client_004', 'issuer': 'Issuer_C', 'tenor_bucket': '6M', 'net_dv01': 0},
        {'client_id': 'Client_004', 'issuer': 'Issuer_C', 'tenor_bucket': '1Y', 'net_dv01': -500},
        {'client_id': 'Client_004', 'issuer': 'Issuer_C', 'tenor_bucket': '2Y', 'net_dv01': -1200},
        {'client_id': 'Client_004', 'issuer': 'Issuer_C', 'tenor_bucket': '5Y', 'net_dv01': -1800},
        {'client_id': 'Client_004', 'issuer': 'Issuer_C', 'tenor_bucket': '10Y', 'net_dv01': -2500},
        
        # Client_005 - Different issuer mix
        {'client_id': 'Client_005', 'issuer': 'Issuer_A', 'tenor_bucket': '1M', 'net_dv01': 7500},
        {'client_id': 'Client_005', 'issuer': 'Issuer_A', 'tenor_bucket': '3M', 'net_dv01': 6800},
        {'client_id': 'Client_005', 'issuer': 'Issuer_A', 'tenor_bucket': '6M', 'net_dv01': 4200},
        {'client_id': 'Client_005', 'issuer': 'Issuer_A', 'tenor_bucket': '1Y', 'net_dv01': 1500},
        {'client_id': 'Client_005', 'issuer': 'Issuer_A', 'tenor_bucket': '2Y', 'net_dv01': -1200},
        {'client_id': 'Client_005', 'issuer': 'Issuer_A', 'tenor_bucket': '5Y', 'net_dv01': -2800},
        {'client_id': 'Client_005', 'issuer': 'Issuer_A', 'tenor_bucket': '10Y', 'net_dv01': -4500},
        
        {'client_id': 'Client_005', 'issuer': 'Issuer_B', 'tenor_bucket': '1M', 'net_dv01': 5500},
        {'client_id': 'Client_005', 'issuer': 'Issuer_B', 'tenor_bucket': '3M', 'net_dv01': 4800},
        {'client_id': 'Client_005', 'issuer': 'Issuer_B', 'tenor_bucket': '6M', 'net_dv01': 2200},
        {'client_id': 'Client_005', 'issuer': 'Issuer_B', 'tenor_bucket': '1Y', 'net_dv01': -500},
        {'client_id': 'Client_005', 'issuer': 'Issuer_B', 'tenor_bucket': '2Y', 'net_dv01': -2200},
        {'client_id': 'Client_005', 'issuer': 'Issuer_B', 'tenor_bucket': '5Y', 'net_dv01': -3800},
        {'client_id': 'Client_005', 'issuer': 'Issuer_B', 'tenor_bucket': '10Y', 'net_dv01': -5200},
    ]
    
    return pd.DataFrame(test_data)


# Example usage
if __name__ == "__main__":
    # Generate sample data
    sample_data = generate_sample_data()
    
    # Initialize the module
    bullet_chart = EnhancedBulletChart(sample_data)
    
    # Define parameters
    client_id = 'Client_001'
    client_id_col = 'client_id'
    measure_col = 'net_dv01'
    category_col = 'tenor_bucket'
    category_order = ['1M', '3M', '6M', '1Y', '2Y', '5Y', '10Y']
    
    print("Creating Enhanced Bullet Charts...")
    print("="*50)
    
    # Example 1: Without issuer (original functionality)
    print("\n1. Standard Bullet Chart (without issuer):")
    fig1, ax1 = bullet_chart.create_bullet_chart(
        client_id, client_id_col, measure_col, category_col, category_order
    )
    plt.show()
    
    # Example 2: With issuer grouping
    print("\n2. Bullet Chart with Issuer Grouping:")
    print("   - Issuers are numbered by total measure value (1 = highest)")
    print("   - Each issuer gets its own section")
    fig2, axes2 = bullet_chart.create_bullet_chart_with_issuers(
        client_id, client_id_col, measure_col, category_col, category_order,
        issuer_col='issuer'  # Optional issuer column
    )
    plt.show()
    
    print("\n" + "="*50)
    print("ISSUER FEATURE DETAILS:")
    print("="*50)
    print("\n1. Issuer Ordering:")
    print("   - Issuers are automatically ordered by ABSOLUTE total measure value")
    print("   - Number 1 = highest absolute total (regardless of sign)")
    print("   - Number 2 = second highest absolute total, etc.")
    print("   - Example: -8000 ranks higher than +5000 (|−8000| > |5000|)")
    
    print("\n2. Visual Layout:")
    print("   - Each issuer gets its own subplot")
    print("   - Issuer label shows: number, name, and total value")
    print("   - All subplots share the same x-axis scale")
    
    print("\n3. Usage with issuer:")
    print("   fig, axes = bullet_chart.create_bullet_chart_with_issuers(")
    print("       client_id='Client_001',")
    print("       client_id_col='client_id',")
    print("       measure_col='net_dv01',")
    print("       category_col='tenor_bucket',")
    print("       category_order=['1M', '3M', '6M', '1Y', '2Y', '5Y', '10Y'],")
    print("       issuer_col='issuer'  # Optional - if provided, creates grouped chart")
    print("   )")
    
    print("\n4. Data Structure with Issuer:")
    print("   client_id  | issuer    | tenor_bucket | net_dv01")
    print("   Client_001 | Issuer_B  | 1M          | 8200")
    print("   Client_001 | Issuer_B  | 3M          | 7500")
    print("   Client_001 | Issuer_A  | 1M          | 5200")
    print("   ...")
