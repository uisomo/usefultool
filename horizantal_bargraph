import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from typing import List, Dict, Tuple

class ProfessionalHorizontalBarChart:
def **init**(self, figsize=(14, 10)):
“””
Initialize the chart with modern styling inspired by Nathan Yau’s Flowing Data

```
    Args:
        figsize: Tuple of figure dimensions (width, height)
    """
    self.figsize = figsize
    self.setup_style()

def setup_style(self):
    """Set up the modern, professional styling"""
    plt.style.use('default')
    plt.rcParams.update({
        'font.family': 'sans-serif',
        'font.sans-serif': ['Arial', 'DejaVu Sans', 'Liberation Sans'],
        'font.size': 11,
        'axes.linewidth': 0.5,
        'axes.spines.left': False,
        'axes.spines.right': False,
        'axes.spines.top': False,
        'axes.spines.bottom': False,
        'xtick.bottom': False,
        'ytick.left': False,
        'grid.linewidth': 0.5,
        'grid.alpha': 0.3
    })

def create_chart(self, 
                data: List[Dict], 
                highlighted_clients: List[str] = None,
                measure_name: str = "Revenue Change (%)",
                title: str = "Client Performance Analysis",
                save_path: str = "horizontal_bar_chart.png",
                dpi: int = 300):
    """
    Create and save the horizontal bar chart
    
    Args:
        data: List of dictionaries with 'name' and 'measure' keys
        highlighted_clients: List of client names to highlight with solid colors
        measure_name: Name of the measure being displayed
        title: Chart title
        save_path: Path to save the PNG file
        dpi: Resolution for the saved image
    """
    
    if highlighted_clients is None:
        highlighted_clients = []
    
    # Convert to DataFrame and sort by absolute value (descending)
    df = pd.DataFrame(data)
    df['abs_measure'] = df['measure'].abs()
    df = df.sort_values('abs_measure', ascending=False).reset_index(drop=True)
    
    # Calculate statistics
    average = df['measure'].mean()
    median = df['measure'].median()
    max_abs = df['abs_measure'].max()
    
    # Create figure and axis
    fig, ax = plt.subplots(figsize=self.figsize, facecolor='#f8f9fa')
    ax.set_facecolor('#ffffff')
    
    # Set up positions
    y_positions = np.arange(len(df))
    bar_height = 0.6
    
    # Create bars
    for i, row in df.iterrows():
        client_name = row['name']
        measure = row['measure']
        is_highlighted = client_name in highlighted_clients
        is_positive = measure >= 0
        
        # Determine colors
        if is_positive:
            color = '#2563eb' if is_highlighted else '#93c5fd'  # Blue solid/light
        else:
            color = '#dc2626' if is_highlighted else '#fca5a5'  # Red solid/light
        
        # Create horizontal bar
        bar = ax.barh(y_positions[i], measure, height=bar_height, 
                     color=color, alpha=0.9, edgecolor='white', linewidth=0.5)
        
        # Add value labels at the end of bars
        label_x = measure + (0.02 * max_abs if measure >= 0 else -0.02 * max_abs)
        text_color = '#374151' if is_highlighted else '#9ca3af'
        
        ax.text(label_x, y_positions[i], f"{measure:+.1f}",
               ha='left' if measure >= 0 else 'right',
               va='center', fontweight='medium', color=text_color, fontsize=10)
        
        # Add client names on the right
        name_x = max_abs * 1.15
        ax.text(name_x, y_positions[i], client_name,
               ha='left', va='center', fontweight='medium', 
               color=text_color, fontsize=10)
    
    # Add statistical lines
    y_min, y_max = -0.5, len(df) - 0.5
    
    # Average line (dashed)
    ax.axvline(x=average, ymin=0, ymax=1, color='#ef4444', 
              linestyle='--', linewidth=2, alpha=0.8, label=f'Average ({average:.1f})')
    
    # Median line (solid)
    ax.axvline(x=median, ymin=0, ymax=1, color='#dc2626', 
              linestyle='-', linewidth=2, alpha=0.8, label=f'Median ({median:.1f})')
    
    # Zero line
    ax.axvline(x=0, ymin=0, ymax=1, color='#374151', 
              linestyle='-', linewidth=1, alpha=0.8)
    
    # Customize axes
    ax.set_ylim(y_min, y_max)
    ax.set_xlim(-max_abs * 1.1, max_abs * 1.4)
    
    # Remove y-axis labels and ticks
    ax.set_yticks([])
    ax.set_yticklabels([])
    
    # Customize x-axis
    x_ticks = np.linspace(-max_abs, max_abs, 9)
    ax.set_xticks(x_ticks)
    ax.set_xticklabels([f'{x:.0f}' for x in x_ticks], color='#6b7280', fontsize=9)
    ax.tick_params(axis='x', length=0, pad=10)
    
    # Add subtle grid
    ax.grid(True, axis='x', alpha=0.3, linewidth=0.5)
    
    # Add titles and labels
    fig.suptitle(title, fontsize=18, fontweight='light', color='#374151', y=0.95)
    ax.set_xlabel(measure_name, fontsize=12, color='#6b7280', labelpad=15)
    
    # Create custom legend
    legend_elements = [
        plt.Line2D([0], [0], color='#dc2626', linewidth=2, label=f'Median ({median:.1f})'),
        plt.Line2D([0], [0], color='#ef4444', linewidth=2, linestyle='--', label=f'Average ({average:.1f})'),
        plt.Rectangle((0,0),1,1, facecolor='#2563eb', label='Positive (Highlighted)'),
        plt.Rectangle((0,0),1,1, facecolor='#93c5fd', label='Positive (Other)'),
        plt.Rectangle((0,0),1,1, facecolor='#dc2626', label='Negative (Highlighted)'),
        plt.Rectangle((0,0),1,1, facecolor='#fca5a5', label='Negative (Other)')
    ]
    
    ax.legend(handles=legend_elements, loc='upper right', frameon=True, 
             fancybox=True, shadow=False, fontsize=9, 
             bbox_to_anchor=(1.0, 1.0))
    
    # Add summary statistics box
    stats_text = f"""Summary Statistics:
```

Average: {average:.1f}
Median: {median:.1f}
Range: {df[‘measure’].min():.1f} to {df[‘measure’].max():.1f}
Clients: {len(df)}”””

```
    ax.text(0.02, 0.98, stats_text, transform=ax.transAxes, fontsize=9,
           verticalalignment='top', bbox=dict(boxstyle='round,pad=0.5', 
           facecolor='#f8f9fa', edgecolor='#e5e7eb', alpha=0.8))
    
    # Adjust layout and save
    plt.tight_layout()
    plt.savefig(save_path, dpi=dpi, bbox_inches='tight', 
               facecolor='#f8f9fa', edgecolor='none')
    plt.show()
    
    return fig, ax
```

def main():
“”“Example usage of the ProfessionalHorizontalBarChart class”””

```
# Sample data
sample_data = [
    {'name': 'Company A', 'measure': 45.2},
    {'name': 'Company B', 'measure': -23.1},
    {'name': 'Company C', 'measure': 67.8},
    {'name': 'Company D', 'measure': -12.4},
    {'name': 'Company E', 'measure': 34.6},
    {'name': 'Company F', 'measure': -45.9},
    {'name': 'Company G', 'measure': 78.3},
    {'name': 'Company H', 'measure': -8.7},
    {'name': 'Company I', 'measure': 52.1},
    {'name': 'Company J', 'measure': -31.5}
]

# Clients to highlight with solid colors
highlighted_clients = ['Company A', 'Company F', 'Company G']

# Create chart instance
chart = ProfessionalHorizontalBarChart(figsize=(14, 10))

# Generate the chart
fig, ax = chart.create_chart(
    data=sample_data,
    highlighted_clients=highlighted_clients,
    measure_name="Revenue Change (%)",
    title="Q4 2024 Client Performance Analysis",
    save_path="client_performance_chart.png",
    dpi=300
)

print("Chart saved as 'client_performance_chart.png'")
```

if **name** == “**main**”:
main()

