from manim import *
import pandas as pd
import numpy as np

# Define custom colors
DARK_GREEN = "#006400"  # For highest gains
DARK_RED = "#8B0000"    # For highest losses
LIGHT_GREY = "#D3D3D3"  # Neutral color

class StockMarketTreemap(Scene):
    def construct(self):
        # Load sector data
        sectors_df = pd.read_csv('sectors.csv', names=['sector_name', 'cob', 'pcob'], header=None)
        sectors_df['difference'] = sectors_df['cob'] - sectors_df['pcob']

        # Create initial colorless treemap for sectors
        sector_squares = self.create_treemap(sectors_df, 'sector_name', 'cob', colorless=True)
        self.play(Create(sector_squares))
        self.wait(1)

        # Color the treemap based on performance differences
        self.color_treemap(sector_squares, sectors_df, 'difference')
        self.wait(1)

        # Zoom into highest gain sector
        max_gain_sector = sectors_df.loc[sectors_df['difference'].idxmax(), 'sector_name']
        self.zoom_into_sector(sector_squares, sectors_df, max_gain_sector)
        self.wait(1)

        # Zoom out and into highest loss sector
        self.zoom_out(sector_squares)
        max_loss_sector = sectors_df.loc[sectors_df['difference'].idxmin(), 'sector_name']
        self.zoom_into_sector(sector_squares, sectors_df, max_loss_sector)
        self.wait(1)

        # Zoom into a specific company (example: first company in the loss sector)
        companies_df = pd.read_csv('companies.csv', names=['company_name', 'cob', 'pcob', 'sector_name'], header=None)
        loss_companies = companies_df[companies_df['sector_name'] == max_loss_sector]
        company_name = loss_companies.iloc[0]['company_name']
        self.zoom_into_company(company_name)
        self.wait(2)

    def create_treemap(self, df, label_col, size_col, colorless=False):
        """Create a treemap with rectangles sized by size_col and labeled by label_col."""
        treemap = VGroup()
        total_size = df[size_col].sum()
        grid_size = int(np.ceil(np.sqrt(len(df))))
        for i, row in df.iterrows():
            size = np.sqrt(row[size_col] / total_size) * 5  # Scale to fit scene
            color = LIGHT_GREY if colorless else self.get_color(row.get('difference', 0), df.get('difference', pd.Series([0])))
            square = Square(side_length=size).set_fill(color, opacity=1).set_stroke(WHITE)
            x = (i % grid_size) * 2 - (grid_size - 1)
            y = (i // grid_size) * 2 - (grid_size - 1)
            square.move_to([x, y, 0])
            treemap.add(square)
            label = Text(row[label_col], font_size=24).next_to(square, DOWN)
            treemap.add(label)
        return treemap

    def get_color(self, diff, differences):
        """Determine color based on performance difference."""
        max_gain = differences.max()
        max_loss = differences.min()
        if diff >= 0:
            intensity = diff / max_gain if max_gain > 0 else 0
            return interpolate_color(LIGHT_GREY, DARK_GREEN, intensity)
        else:
            intensity = abs(diff) / abs(max_loss) if max_loss < 0 else 0
            return interpolate_color(LIGHT_GREY, DARK_RED, intensity)

    def color_treemap(self, treemap, df, diff_col):
        """Animate color changes based on performance."""
        animations = []
        for i, square in enumerate(treemap[::2]):  # Every other element is a square
            diff = df.iloc[i][diff_col]
            new_color = self.get_color(diff, df[diff_col])
            animations.append(square.animate.set_fill(new_color, opacity=1))
        self.play(*animations, run_time=2)

    def zoom_into_sector(self, sector_squares, sectors_df, sector_name):
        """Zoom into a sector and display its companies."""
        sector_idx = sectors_df[sectors_df['sector_name'] == sector_name].index[0] * 2
        sector_square = sector_squares[sector_idx]

        # Fade out other sectors
        other_squares = VGroup(*[s for s in sector_squares if s != sector_square and s != sector_squares[sector_idx + 1]])
        self.play(FadeOut(other_squares), sector_square.animate.scale(4).move_to(ORIGIN), run_time=2)

        # Load and filter company data for this sector
        companies_df = pd.read_csv('companies.csv', names=['company_name', 'cob', 'pcob', 'sector_name'], header=None)
        sector_companies = companies_df[companies_df['sector_name'] == sector_name]
        sector_companies['difference'] = sector_companies['cob'] - sector_companies['pcob']

        # Create company treemap
        company_treemap = self.create_treemap(sector_companies, 'company_name', 'cob')
        self.play(Transform(sector_square, company_treemap), run_time=2)

    def zoom_out(self, sector_squares):
        """Zoom out to show all sectors again."""
        self.play(FadeIn(sector_squares), run_time=2)

    def zoom_into_company(self, company_name):
        """Zoom into a company for detailed analysis (placeholder)."""
        analysis_text = Text(f"Analysis for {company_name}", font_size=36).move_to(ORIGIN)
        self.play(Write(analysis_text))

# To render the animation, run this command in your terminal:
# manim -pql script_name.py StockMarketTreemap